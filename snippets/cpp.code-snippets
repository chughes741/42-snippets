{
	"C++ Class Prototype": {
		"prefix": "!classheader",
		"body": "\n#ifndef ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_H_/}\n# define ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_H_/}\n\n$1//# include <iostream>\n$2//# include <string>\n\n\nclass ${TM_FILENAME/(.*)\\..+$/$1/} {\n\tpublic:\n\t\t${TM_FILENAME/(.*)\\..+$/$1/}( void );\n\t\t${TM_FILENAME/(.*)\\..+$/$1/}( $4 );\n\t\t${TM_FILENAME/(.*)\\..+$/$1/}( const ${TM_FILENAME/(.*)\\..+$/$1/} &${TM_FILENAME/(.*)\\..+$/${1:/downcase}/});\n\t\t~${TM_FILENAME/(.*)\\..+$/$1/}();\n\t\t${TM_FILENAME/(.*)\\..+$/$1/} & operator = (const ${TM_FILENAME/(.*)\\..+$/$1/} &${TM_FILENAME/(.*)\\..+$/${1:/downcase}/});\n\n\tprivate:\n\t\t$3\n};\n\n\n#endif // ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_H_/}",
		"description": "Class prototype",
	},
	"C++ Class Definition": {
		"prefix": "!classdefinition",
		"body": "\n\n#include \"${TM_FILENAME/(.*)\\..+$/$1/}.hpp\"\n\n$1//#include <iostream>\n$2//#include <string>\n\n\n${TM_FILENAME/(.*)\\..+$/$1/}::${TM_FILENAME/(.*)\\..+$/$1/}( void ) {\n\treturn;\n}\n\n${TM_FILENAME/(.*)\\..+$/$1/}::${TM_FILENAME/(.*)\\..+$/$1/}( $3 ) {\n\treturn;\n}\n\n${TM_FILENAME/(.*)\\..+$/$1/}::~${TM_FILENAME/(.*)\\..+$/$1/}( void ) {\n\treturn;\n}\n",
		"description": "Class method definitions"
	},
	"C header template": {
		"prefix": "!cheader",
		"body": "\n#ifndef ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_H_/}\n# define ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_H_/}\n\n$1//# include <stdio.h>\n$2//# include <unistd.h>\n\n\n$0\n\n\n#endif // ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_H_/}",
		"description": "C headerfile template"
	}
}