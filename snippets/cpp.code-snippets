{
	"C++ Class Prototype": {
		"prefix": "!classheader",
		"body": [
			"",
			"#ifndef ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_HPP_/}",
			"# define ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_HPP_/}",
			"",
			"$1//# include <iostream>",
			"$2//# include <string>",
			"",
			"",
			"class ${TM_FILENAME/(.*)\\..+$/$1/} {",
			"\tpublic:",
			"\t\t${TM_FILENAME/(.*)\\..+$/$1/}( void );",
			"\t\t${TM_FILENAME/(.*)\\..+$/$1/}( $4 );",
			"\t\t${TM_FILENAME/(.*)\\..+$/$1/}( const ${TM_FILENAME/(.*)\\..+$/$1/} &${TM_FILENAME/(.*)\\..+$/${1:/downcase}/});",
			"\t\t~${TM_FILENAME/(.*)\\..+$/$1/}();",
			"\t\t${TM_FILENAME/(.*)\\..+$/$1/} & operator = (const ${TM_FILENAME/(.*)\\..+$/$1/} &${TM_FILENAME/(.*)\\..+$/${1:/downcase}/});",
			"",
			"\tprivate:",
			"\t\t$3",
			"};",
			"",
			"",
			"#endif // ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_HPP_/}",
			"",
		],
		"description": "Class prototype",
	},
	"C++ Class Definition": {
		"prefix": "!classdefinition",
		"body": [
			"",
			"#include \"${TM_FILENAME/(.*)\\..+$/$1/}.hpp\"",
			"",
			"$1//#include <iostream>",
			"$2//#include <string>",
			"",
			"",
			"${TM_FILENAME/(.*)\\..+$/$1/}::${TM_FILENAME/(.*)\\..+$/$1/}( void ) {",
			"\treturn;",
			"}",
			"",
			"${TM_FILENAME/(.*)\\..+$/$1/}::${TM_FILENAME/(.*)\\..+$/$1/}( $3 ) {",
			"\treturn;",
			"}",
			"",
			"${TM_FILENAME/(.*)\\..+$/$1/}::~${TM_FILENAME/(.*)\\..+$/$1/}( void ) {",
			"\treturn;",
			"}",
			"",
		],
			"description": "Class method definitions"
	},
	"C header template": {
		"prefix": "!cheader",
		"body": [
			"",
			"#ifndef ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_H/}",
			"# define ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_H/}",
			"",
			"$1//# include <stdio.h>",
			"$2//# include <unistd.h>",
			"",
			"",
			"$0",
			"",
			"",
			"#endif // ${TM_FILENAME/(.*)\\..+$/${1:/upcase}_H/}",
			"",
		],
		"description": "C headerfile template"
	}
}